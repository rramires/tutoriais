1 - Crie um novo projeto com o react (vamos usar o asssitente)
// o parametro "react_app" é a pasta do projeto
npx create-react-app react_app


2 - Comite a instalação
git add .
git commit -m 'Instalação do React'
git push -u origin master


3 - Entre e inicialize
cd react_app
yarn start
// Vai abrir uma janela do navegador com sua app


4 -  Abra o VSCode
code .


5 - Procure em src, App.js
// acrescente após o header e salve
<p>Hello React !</p>
// Perceba que ao salvar a app rodando no browser atualiza automaticamente


6 - Perceba que App é uma function, e que o return dela 
// é o html que será renderizado no navegador


7 - Adicione antes da function App outra function
function handleButtonClick(){
  alert('Clicou!!!');
}


8 - Apague tudo dentro do header, menos o "Hello React!"
// e adicione um botão
<header className="App-header">
	<p>Hello React !</p>
	<input type="button" value="Clique Me!" onClick={handleButtonClick}/>
</header>

// Teste e veja a janela de alerta


9 - O interessante do React é criar componentes reaproveitaveis
// Vamos criar um para o cabeçalho
// Crie um arquivo Header.js e adicione

// Sempre importa o React
import React from "react";

// cria uma função com o mesmo nome do arquivo.js
function Header(){
    return(
        // Digite aqui o HTML
        <header>
            <h1>Hello React!!!</h1>
        </header>
    )
}
// exporta o component
export default Header;

// 10 - Vamos agora utilizar na App.js
// no inicio importe
import Header from './Header';

// Apague o header do html, deixando só o botão 
// e adicione seu novo component <Header/>
// fica assim

function App() { 
  return (
    <div className="App">
      <Header/>
      <input type="button" value="Clique Me!" onClick={handleButtonClick}/>
    </div>
  );
}


11 - Recebendo parametros
// adicione uma propriedade na função Header
Header(props)
// props é um objeto com todas as propriedades do component
// props é um objeto com todas as propriedades do component

// onde está "Hello React!!!" substitua por
<h1>{props.title}</h1>
// Fica assim

function Header(props){
    return(
        // Digite aqui o HTML
        <header>
            <h1>{props.title}</h1>
        </header>
    )
}

// Em App.js, adicione o parametro title no Header
<Header title="Hello Componet Header !!!"/>

// observe que title, é uma propriedade adicionada a props na instância do Header


12 - Vamos fazer um pequeno contador para mostrar a atualização dinâmica de valores
// adicione uma variavel antes do handleButtonClick
let cont = 0;

// no handleButtonClick, tire o Alert e incremente a variavel cont
function handleButtonClick(){
  cont ++;
}

// no title do Header vamos utilizar
<Header title={cont}/>

// teste clicando e perceba que NÃO FUNCIONOU!!!

13 - Para que funcione é preciso criar um State
// para isso importe no inicio
import { useState } from 'react';

// mude a variavel let, e o handleButtonClick para dentro de App

function App() { 

  let cont = 0;
  function handleButtonClick(){
    cont ++;
  }

  return...
  
// troque a variavel cont por uma "reflect" chamada contador
// const[nomeDaVariavel, funcao] = useState(valorInicial)
const [contador, setContador] = useState(0);

// dentro do handle use a funcao setContador para fazer o incremento na chamada dela
function handleButtonClick(){
	setContador(contador +1); // ++ não funciona
}

// por último vamos deixar melhorzinho o texto
<Header title={'O Valor é: ' + contador}/>

// perceba que agora quando clica no botão ele executa o incremento
// no "local certo"/state e atualiza dinamicamente o valor na página

// os estados são a base do react... foi só um gostinho mesmo!









